n.pts = rep(n.pts, n.rep),
frac = rep(n.frac, n.rep),
res = map(
n.pts, ~
dat %>% random_points(n = .x) %>%
extract_covariates(landuse) %>%
extract_covariates(elevation) %>%
extract_covariates(popden) %>%
mutate(landuseC = reclass_landuse(landuse),
elevation = scale(elevation),
popden = scale(popden),
w = ifelse(case_, 1, 5000)) %>%
glm(case_ ~ elevation + popden + landuseC,
weight = w, data = ., family = binomial()) %>%
tidy()))
res1 <- tibble(
n.pts = rep(n.pts, n.rep),
frac = rep(n.frac, n.rep),
res = map(
n.pts, ~
dat %>% random_points(n = .x) %>%
extract_covariates(landuse) %>%
extract_covariates(elevation) %>%
extract_covariates(popden) %>%
mutate(landuseC = reclass_landuse(landuse),
elevation = scale(elevation),
popden = scale(popden),
w = ifelse(case_, 1, 5000)) %>%
glm(case_ ~ elevation + popden + landuseC,
weight = w, data = ., family = binomial())))
#' Use the largest sample size here for the rest of the paper
Lupe.dat <- dat %>%
random_points(n = max(n.pts)) %>%
extract_covariates(landuse) %>%
extract_covariates(elevation) %>%
extract_covariates(popden) %>%
mutate(landuseC = reclass_landuse(landuse),
elevation = scale(elevation),
popden = scale(popden))
plot(Lupe.dat)
plot(Lupe.dat)
Lupe.dat
Lupe.dat %>%
group_by(case_, landuseC) %>%
summarize(n = n()) %>%
mutate(prop = n / sum(n),
label = paste0(round(prop * 100, 1), "%")) %>%
ggplot(aes(landuseC, prop, fill = case_, group=case_,label = label)) +
geom_col(position = position_dodge2()) +
geom_text(size = 4, vjust = -0.25, position = position_dodge(width = 1)) +
labs(x = "Land use class", y = "Proportion", fill = "case_")+
scale_fill_brewer(palette = "Paired", name="case_",
breaks=c("FALSE", "TRUE"), labels=c("Available", "Used")) +
theme_light()
Lupe.dat %>%
group_by(case_, landuseC)
Lupe.dat %>%
group_by(case_, landuseC) %>%
summarize(n = n())
Lupe.dat %>%
group_by(case_, landuseC) %>%
summarize(n = n()) %>%
mutate(prop = n / sum(n),
label = paste0(round(prop * 100, 1), "%"))
?n()
Lupe.dat$w <- ifelse(Lupe.dat$case_, 1, 5000)
HSF.Lupe1 <- glm(case_ ~ elevation + popden + landuseC,
data = Lupe.dat, weight = w,
family = binomial(link = "logit"))
summary(HSF.Lupe1)
exp(3 * coef(HSF.Lupe1)["elevation"] +
1.5 * coef(HSF.Lupe1)["popden"] + coef(HSF.Lupe1)["landuseCwet"]) /
exp(2 * coef(HSF.Lupe1)["elevation"] + 1.5 * coef(HSF.Lupe1)["popden"] +
coef(HSF.Lupe1)["landuseCwet"])
exp(coef(HSF.Lupe1)["elevation"])
coef(HSF.Lupe1)
exp(coef(HSF.Lupe1)["landuseCwet"])
ggplot(Lupe.dat, aes(landuseC, elevation, fill=case_))+
geom_boxplot() +
scale_fill_brewer(palette = "Paired", name="case_",
breaks=c("FALSE", "TRUE"), labels=c("Available", "Used"))+
theme_light()
HSF.Lupe3 <- glm(
case_ ~ elevation + popden + landuseC + elevation:landuseC,
data = Lupe.dat,
weight=w,
family = binomial)
summary(HSF.Lupe3)
sessioninfo::session_info()
if(!"sessioninfo" %in% rownames(installed.packages())){install.packages("sessioninfo")}
install.packages("sessioninfo")
install.packages("sessioninfo")
library(sessioninfo)
fisher <- amt_fisher
landuse <- amt_fisher_covar$landuse
elevation <- amt_fisher_covar$elevation
popden <- amt_fisher_covar$popden
# Filter for individual Lupe and sort the locations using the timestamps of the observations
dat <- fisher %>%
filter(name == "Lupe") %>%
arrange(t_)
# Create function to reclassify landuse types
reclass_landuse <- function(x) {
fct_collapse(factor(x),
forest = c("30","40","50","60", "70","80", "90","100"),
grass = c("120", "140"),
wet = c("160"))
}
library(raster)
library(amt)
# Load fisher location data and spatial covariate data
fisher <- amt_fisher
landuse <- amt_fisher_covar$landuse
elevation <- amt_fisher_covar$elevation
popden <- amt_fisher_covar$popden
# Filter for individual Lupe and sort the locations using the timestamps of the observations
dat <- fisher %>%
filter(name == "Lupe") %>%
arrange(t_)
# Create function to reclassify landuse types
reclass_landuse <- function(x) {
fct_collapse(factor(x),
forest = c("30","40","50","60", "70","80", "90","100"),
grass = c("120", "140"),
wet = c("160"))
}
ssf_dat <- dat %>%
track_resample(rate = minutes(2), tolerance = seconds(20)) %>%
steps_by_burst() %>%
random_steps() %>%
extract_covariates(landuse, where = "both") %>%
extract_covariates(elevation, where = "both") %>%
extract_covariates(popden, where = "both") %>%
mutate(elevation_start = scale(elevation_start),
elevation_end = scale(elevation_end),
popden_start = scale(popden_start),
popden_end = scale(popden_end),
landuseC_start = reclass_landuse(landuse_start),
landuseC_end = reclass_landuse(landuse_end),
forest_start = landuseC_start == "forest",
forest_end = landuseC_end == "forest",
cos_ta_ = cos(ta_),
log_sl_ = log(sl_)
) %>%
filter(!is.na(ta_))
devtools::install_github("jmsigner/amt")
Rapp.updates()
sessionInfo()
sessionInfo()
sessionInfo()
# Load the data from the "Data" directory
InputData <- read_csv(file = "~/WorldPartnersHelp/Data/FoodAidDataSept.csv")
# Get unique village names from input data
UniqueVillages <- InputData %>%
# Select only villages
dplyr::select(`Village/town`) %>%
# Get distinct villages
distinct(`Village/town`) %>%
# Create country column
mutate(country = "Ukraine") %>%
# Get lat and lon of village by its name
geocode(city = `Village/town`, country = country, method = "osm", lat = lat, long = lng )
# Install required packages
if(!"rgdal" %in% rownames(installed.packages())){install.packages("rgdal")}
if(!"rgeos" %in% rownames(installed.packages())){install.packages("rgeos")}
if(!"sf" %in% rownames(installed.packages())){install.packages("sf")}
if(!"tidyverse" %in% rownames(installed.packages())){install.packages("tidyverse")}
if(!"lubridate" %in% rownames(installed.packages())){install.packages("lubridate")}
if(!"stringi" %in% rownames(installed.packages())){install.packages("stringi")}
if(!"tidygeocoder" %in% rownames(installed.packages())){install.packages("tidygeocoder")}
if(!"atlastools" %in% rownames(installed.packages())){install.packages("atlastools")}
# Load required packages
library(rgdal)
library(rgeos)
library(sf)
library(tidyverse)
library(lubridate)
library(stringi)
library(tidygeocoder)
library(raster)
library(atlastools)
library(data.table)
# Load required packages
library(rgdal)
library(rgdal)
detach("package:rgdal", unload = TRUE)
library(rgdal)
# Install required packages
if(!"rgdal" %in% rownames(installed.packages())){install.packages("rgdal")}
# Load required packages
library(rgdal)
# Load the data from the "Data" directory
InputData <- read_csv(file = "~/WorldPartnersHelp/Data/FoodAidDataSept.csv")
# Load required packages
library(sf)
install.packages("rgdal")
library(rgdal)
library(rgdal)
install.packages('rgdal')
library(rgdal)
remove.packages("rgdal")
install.packages("rgdal")
library(rgdal)
# Function to install and load packages
CheckPackages <- function(packagelist){
for (package in packagelist){
if(!require(package, character.only = TRUE)){
install.packages(package, character.only = TRUE)
require(package, character.only = TRUE)
}
library(package, character.only = TRUE)
}
}
# Call ChackPackages
CheckPackages(c("lidR", "sf", "dplyr", "ggmap", "sp", "rgdal", "future", "timeDate", "terra"))
# Create path to files
TestTilesPath <- "~/ahncanopygaps/InputData/TestTiles/"
# Read las files
AHN3Tile <- readLAS(paste0(TestTilesPath, "AHN3ROI.las"))
AHN4Tile <- readLAS(paste0(TestTilesPath, "AHN4ROI.las"))
# Create function to plot cros section
plot_crossection <- function(las,
p1 = c(min(las@data$X), mean(las@data$Y)),
p2 = c(max(las@data$X), mean(las@data$Y)),
width = 4, colour_by = NULL){
colour_by <- enquo(colour_by)
data_clip <- clip_transect(las, p1, p2, width)
p <- ggplot(data_clip@data, aes(X,Z)) + geom_point(size = 0.5) + coord_equal() + theme_minimal()
if (!is.null(colour_by))
p <- p + aes(color = !!colour_by) + labs(color = "")
return(p)
}
# Plot cros section
p1 <- c(175510, 474800)
p2 <- c(175710, 474800)
plot_crossection(AHN3Tile, p1 , p2, colour_by = factor(Classification))
## Plot 3D section of the ground
groundAHN3 <- filter_ground(AHN3Tile)
plot(groundAHN3, size = 3, bg = "white")
plot_crossection(AHN3Tile, p1 , p2, colour_by = factor(Classification))
groundAHN4 <- filter_ground(AHN4Tile)
plot(groundAHN4, size = 3, bg = "white")
## Plot 3D section of the ground
groundAHN3 <- filter_ground(AHN3Tile)
plot(groundAHN3, size = 3, bg = "white")
## Create DEMs with different algorithms
dtm_tin <- rasterize_terrain(AHN3Tile, res = 1, algorithm = tin())
plot_dtm3d(dtm_tin, bg = "white")
dtm_idw <- rasterize_terrain(AHN3Tile, algorithm = knnidw(k = 10L, p = 2))
plot_dtm3d(dtm_idw, bg = "white")
dtm_kriging <- rasterize_terrain(AHN3Tile, algorithm = kriging(k = 40))
plot_dtm3d(dtm_kriging, bg = "white")
Sys.time()
history <- Sys.time()
now <- Sys.time()
now-history
# Call ChackPackages
CheckPackages(c("lidR", "sf", "dplyr", "ggmap", "sp", "rgdal", "future", "timeDate",
"terra", "rayshader"))
# Call ChackPackages
CheckPackages(c("lidR", "sf", "dplyr", "ggmap", "sp", "rgdal", "future", "timeDate",
"terra", "av", "rayshader"))
# Call ChackPackages
CheckPackages(c("lidR", "sf", "dplyr", "ggmap", "sp", "rgdal", "future", "timeDate",
"terra", "libavfilter", "av", "rayshader"))
devtools::install_github("tylermorganwall/rayshader")
# Call ChackPackages
CheckPackages(c("lidR", "sf", "dplyr", "ggmap", "sp", "rgdal", "future", "timeDate",
"terra", "rayshader", "tictoc"))
devtools::install_github("collectivemedia/tictoc")
# Call ChackPackages
CheckPackages(c("lidR", "sf", "dplyr", "ggmap", "sp", "rgdal", "future", "timeDate",
"terra", "rayshader", "tictoc"))
?tic
tic("DTM tin")
dtm_tin <- rasterize_terrain(AHN3Tile, res = 1, algorithm = tin())
plot_dtm3d(dtm_tin, bg = "white")
toc()
tic("DTM knnidw")
dtm_idw <- rasterize_terrain(AHN3Tile, algorithm = knnidw(k = 10L, p = 2))
plot_dtm3d(dtm_idw, bg = "white")
toc()
tic("DTM kriging")
dtm_kriging <- rasterize_terrain(AHN3Tile, algorithm = kriging(k = 40))
plot_dtm3d(dtm_kriging, bg = "white")
toc()
dtm_idw <- rasterize_terrain(AHN3Tile, algorithm = knnidw(k = 10L, p = 2))
plot_dtm3d(dtm_idw, bg = "white")
toc() # DTM knnidw: 4.876 sec elapsed
tic("DTM knnidw")
dtm_idw <- rasterize_terrain(AHN3Tile, algorithm = knnidw(k = 10L, p = 2))
plot_dtm3d(dtm_idw, bg = "white")
toc() # DTM knnidw: 4.876 sec elapsed
#### PARAMETER SETTING ####
library(lidR)
library(raster)
library(colorRamps)
library(colorRamps)
library(sp)
library(rgl)
getwd()
setwd("~/GISThesis/data/AEOscript/AEO_LiDAR_exercises_2021/ALS_AHN3")
LASfile <-"AHN3/tile_rhenen_west_small.laz" ## set the name of the file to be loaded
las= readLAS (LASfile) ## open the .las file, which will be named "las"
epsg(las) = 28992  ## set RD coordinate system
extent(las)
plot(las) ## a 3D viewer will be opened with the point cloud displayed
rgl.close() ## to close the viewer again. Do so regularly to prevent memory issues.
#--> Let's display the points with some of the other attributes. You may have to close some viewers if your computer get's slow
plot(las, color="Intensity", colorPalette= heat.colors(50), trim=300)
#--> Let's display the points with some of the other attributes. You may have to close some viewers if your computer get's slow
plot(las, color="Intensity", colorPalette= heat.colors(50), breaks="quantile")
#--> Let's display the points with some of the other attributes. You may have to close some viewers if your computer get's slow
plot(las, color="Intensity", pal= heat.colors(50), breaks="quantile")
rgl.close()
plot(las, color="ReturnNumber")
rgl.close()
plot(las, color="Classification")
unique(las@data$Classification)
rgl.close()  ## just close the 3d plots to keep the computers going
#--> now let's select the points which are classified as ground points only, there is a special function for this:
ground <- filter_ground(las)
plot(ground) ## to plot all points classified as ground points
rground <- (grid_metrics(ground, res=1, mean(Z)))## to convert the ground points to a raster format
plot(rground, col=matlab.like2(50))
plot(groundAHN3, size = 3, bg = "white")
plot_dtm3d(dtm_tin)
?matlab.like2
?grid_metrics
RasterGroundAHN3 <- grid_metrics(groundAHN3, res=1, mean(Z))
plot(RasterGroundAHN3, col=matlab.like2(50))
plot(rground, col=matlab.like2(50))
RasterGroundAHN4 <- grid_metrics(groundAHN4, res=1, mean(Z))
plot(RasterGroundAHN4, col=matlab.like2(50))
plot(RasterGroundAHN3, col=matlab.like2(50))
plot(RasterGroundAHN4, col=matlab.like2(50))
buildings <- las %>% filter_poi(Classification==6)
plot(buildings) ## visualize the points classified as buildings
plot(buildings, color="ScanAngleRank") ## visualize the points classified as buildings
## if you want to filter the data based on other attributes you can use this function
other <- las %>% filter_poi(Classification==1) ## this contains all vegetation and other objects (lamp posts etc)
plot(other, color="ReturnNumber")
AHN3Other <- AHN3Tile %>% filter_poi(Classification==1) ## this contains all vegetation and other objects (lamp posts etc)
plot(AHN3Other, color="ReturnNumber")
## let's first determine some basic rasters
minHeight = grid_metrics(las, res=1, min(Z)) ## returns a 1m raster with the minimum Z value per grid cell
maxHeight = grid_metrics(las, res=1, max(Z)) ## returns a 1m raster with the maximum Z value per grid cell
plot(maxHeight, main="Maximum Height (m)", col=matlab.like2(50))
plot(minHeight, main="Minimum Height (m)", col=matlab.like2(50))
plot(rground, col=matlab.like2(50))
plot(minHeight, main="Minimum Height (m)", col=matlab.like2(50))
## from these two rasters you can calculate the difference in minimum and maximum height
rHeightdiff <- maxHeight - minHeight ## calculate the heightdifference
plot(rHeightdiff, main="Object Height", col=matlab.like2(50))
##  Let's evaluate the point density distribution
density <- grid_density(las, res=1) ## calculate the number of points per surface area
plot(density, main="Point Density", col= matlab.like2(50)) ## to plot a map with the point density
hist(density, breaks=50, main="Histogram of point density per m2", xlab="Point Density per m2") ## create a frequency histogram
### for creating a DEM you mainly need a lot of points on the ground. Let's check that density
ground_dens <- grid_density(ground, res=1) ## calculate density of gorund points
plot(ground_dens, main="Ground Points Density", col= matlab.like2(50))
hist(ground_dens, breaks=50, main="Histogram of Ground point density per m2", xlab="Point Density per m2") ## create a frequency histogram
## let's have a look at the relative point density:
rel_dens <- ground_dens/density
plot(rel_dens, zlim=c(0,1), col= matlab.like2(50), main="Relative Point Density")
DTM <- grid_terrain(las, res=1, algorithm = knnidw(k=6L, p = 2), keep_lowest = FALSE)  ## create a DTM using IDW interpolation
plot(DTM, main="DTM", col=matlab.like2(50))
## Let's check what the difference in output is if you use this function
DTMkl <- grid_terrain(las, res=1, algorithm = knnidw(k=6L, p = 2), keep_lowest=TRUE) ## interpolate DTM keeping lowest points
plot(DTMkl, main="DTM - keep lowest point", col=matlab.like2(50))
kl_diff <- DTM - DTMkl ## calculate the difference between the two rasters
plot(kl_diff, col=matlab.like2(50), main="DTM Difference using different interpolation options", zlim=c(0,0.5)) ## create a plot that shows the difference
#### CHM CREATIONl ####
## Off course we can also look at the highest point, which is often done to create a canopy height model
CHM<-grid_canopy(las, res=1, p2r(0.2))
plot(CHM, main="CHM", col=matlab.like2(50))
#### Simple Terrain correction ####
## To calculate the height relative to the terrain you can substract the DTM from the CHM.
Object_height <- CHM - DTMkl
plot(Object_height, main="Object Height", col=matlab.like2(50))
click(Object_height) ## now you can click in the viewer to read the raster values
nlas <- normalize_height(las,DTM) ## here you correct all z-values for the corresponding terrain height.
## be aware that the DTM is used as a reference. You know there are different choices when creating that!
## this will influence your result. Also the DTM resolution will influence the outcomes, especially in steep terrain.
plot(nlas)  ## you can see that the terrain has become as flat as the Netherlands are often thought to be
hist(nlas@data$Z, main="Histogram of normalized Z values", xlab="Height (m)", ylab="Frequency") ## plot a histogram of the normalized Z values
DBH_slice <-  nlas %>% lasfilter(Z>1 & Z<1.5) ## slice around Breast height
DBH_slice <-  nlas %>% filter_poi(Z>1 & Z<1.5) ## slice around Breast height
Crowns_slice <-  nlas %>% filter_poi(Z>10) ## or for the tree crowns and higher parts of buildings
plot(DBH_slice, color="Classification")
plot(Crowns_slice, color="Classification")
sub1 <- clip_circle(nlas,166862,441800, 10 )
plot(sub1)
sub2<- clip_circle(nlas,166730,441851, 10 )
plot(sub2)
sub3<- clip_circle(nlas,166909,441836, 10 )
plot(sub3)
sub4<- clip_circle(nlas,166900,441790, 10 )
plot(sub4)
## For each subset we can calculate the gap fraction at different heights above the terrain
gapFraction1 <- (gap_fraction_profile(sub1@data$Z))
gapFraction2 <- (gap_fraction_profile(sub2@data$Z))
gapFraction3 <- (gap_fraction_profile(sub3@data$Z))
gapFraction4 <- (gap_fraction_profile(sub4@data$Z))
## And put this in a nice plot
plot(gapFraction1$z ~ gapFraction1$gf, type="l", xlim=c(0.8,1), ylim=c(0,20), main="Gap Fraction Profiles", xlab="Gap Fraction", ylab="Height [m]")
points(gapFraction2$z ~ gapFraction2$gf, type="l",col=2, lty=2)
points(gapFraction3$z ~ gapFraction3$gf, type="l",col=3, lty=3)
points(gapFraction4$z ~ gapFraction4$gf, type="l",col=4, lty=4)
legend(0.8,20, legend=c("1", "2", "3","4" ), col=c(1:4), lty=1:4, bty="n")
## And put this in a nice plot
plot(gapFraction1$z ~ gapFraction1$gf, type="l", xlim=c(0.8,1), ylim=c(0,20), main="Gap Fraction Profiles", xlab="Gap Fraction", ylab="Height [m]")
points(gapFraction2$z ~ gapFraction2$gf, type="l",col=2, lty=2)
points(gapFraction3$z ~ gapFraction3$gf, type="l",col=3, lty=3)
points(gapFraction4$z ~ gapFraction4$gf, type="l",col=4, lty=4)
legend(0.8,20, legend=c("1", "2", "3","4" ), col=c(1:4), lty=1:4)
legend(0.8,20, legend=c("1", "2", "3","4" ), col=c(1:4), lty=1:4, bty="n")
## And put this in a nice plot
plot(gapFraction1$z ~ gapFraction1$gf, type="l", xlim=c(0.8,1), ylim=c(0,20), main="Gap Fraction Profiles", xlab="Gap Fraction", ylab="Height [m]")
points(gapFraction2$z ~ gapFraction2$gf, type="l",col=2, lty=2)
points(gapFraction3$z ~ gapFraction3$gf, type="l",col=3, lty=3)
points(gapFraction4$z ~ gapFraction4$gf, type="l",col=4, lty=4)
legend(0.8,20, legend=c("1", "2", "3","4" ), col=c(1:4), lty=1:4, bty="n")
plot(RasterGroundAHN4, col=matlab.like2(50))
setwd("~/ahncanopygaps/R")
dtm_tin_prod <- terra::terrain(dtm_tin, v = c("slope", "aspect"), unit = "degrees")
dtm_tin_hillshade <- shade(slope = dtm_tin_prod$slope, aspect = dtm_tin_prod$aspect)
plot(dtm_tin_hillshade, col =gray(0:30/30), legend = FALSE)
dtm_tin_prod <- terra::terrain(dtm_tin, v = c("slope", "aspect"), unit = "radians")
dtm_tin_hillshade <- shade(slope = dtm_tin_prod$slope, aspect = dtm_tin_prod$aspect)
plot(dtm_tin_hillshade, col =gray(0:30/30), legend = FALSE)
dtm_tin_prod <- terra::terrain(dtm_tin, v = c("slope"), unit = "radians")
dtm_tin_hillshade <- shade(slope = dtm_tin_prod$slope, aspect = dtm_tin_prod$aspect)
dtm_tin_prod <- terra::terrain(dtm_tin, v = c("slope"), unit = "radians")
dtm_tin_hillshade <- shade(slope = dtm_tin_prod$slope)
dtm_tin_prod <- terra::terrain(dtm_tin, v = c("slope", "aspect"), unit = "radians")
dtm_tin_hillshade <- shade(slope = dtm_tin_prod$slope, aspect = dtm_tin_prod$aspect)
plot(dtm_tin_hillshade, col =gray(0:30/30), legend = FALSE)
dtm_idw_prod <- terra::terrain(dtm_idw, v = c("slope", "aspect"), unit = "radians")
dtm_idw_hillshade <- shade(slope = dtm_idw_prod$slope, aspect = dtm_idw_prod$aspect)
plot(dtm_idw_hillshade, col =gray(0:30/30), legend = FALSE)
dtm_tin_raster <- terra::rast(dtm_tin)
dtm_tin_elmat <- rayshader::raster_to_matrix(dtm_tin_raster)
dtm_tin_raster
plot(dtm_tin_raster)
dtm_tin_raster <- raster::raster(dtm_tin)
dtm_tin_raster
dtm_tin_elmat <- rayshader::raster_to_matrix(dtm_tin_raster)
dtm_tin_raster <- terra::rast(dtm_tin)
dtm_tin_raster
crs(dtm_tin)
dtm_tin_raster <- terra::project(dtm_tin_raster, crs(dtm_tin))
dtm_tin_raster
dtm_tin_elmat <- rayshader::raster_to_matrix(dtm_tin_raster)
dtm_tin_raster <- terra::rast(dtm_tin)
dtm_tin_raster <- terra::project(dtm_tin_raster, dtm_tin)
dtm_tin_elmat <- rayshader::raster_to_matrix(dtm_tin_raster)
dtm_tin_raster <- raster::raster(dtm_tin)
dtm_tin_elmat <- rayshader::raster_to_matrix(dtm_tin_raster)
map <- dtm_tin_elmat %>%
sphere_shade(texture = "imhof1", progbar = FALSE) %>%
add_water(detect_water(dtm_tin_elmat), color = "imhof1") %>%
add_shadow(ray_shade(dtm_tin_elmat, progbar = FALSE), 0.5) %>%
add_shadow(ambient_shade(dtm_tin_elmat, progbar = FALSE), 0)
detect_water(dtm_tin_elmat)
ray_shade(dtm_tin_elmat, progbar = FALSE)
add_shadow(ray_shade(dtm_tin_elmat, progbar = FALSE), 0.5)
ambient_shade(dtm_tin_elmat, progbar = FALSE)
dtm_tin_elmat
map <- dtm_tin_elmat %>%
sphere_shade(texture = "imhof1", progbar = FALSE) %>%
add_water(detect_water(dtm_tin_elmat), color = "imhof1") %>%
add_shadow(ray_shade(dtm_tin_elmat, progbar = FALSE), 0.5) %>%
add_shadow(ambient_shade(dtm_tin_elmat, progbar = FALSE), 0)
map <- dtm_tin_elmat %>%
sphere_shade(texture = "imhof1", progbar = FALSE)
map
plot_map(map)
map <- dtm_tin_elmat %>%
sphere_shade(texture = "imhof1", progbar = FALSE) %>%
add_water(detect_water(dtm_tin_elmat), color = "imhof1") %>%
add_shadow(ray_shade(dtm_tin_elmat, progbar = FALSE), 0.5)
plot_3d(map)
dtm_tin
dtm_tin_raster <- raster::raster(dtm_tin)
dtm_tin_elmat <- rayshader::raster_to_matrix(dtm_tin_raster)
map <- dtm_tin_elmat %>%
sphere_shade(texture = "imhof1", progbar = FALSE) %>%
add_water(detect_water(dtm_tin_elmat), color = "imhof1") %>%
add_shadow(ray_shade(dtm_tin_elmat, progbar = FALSE), 0.5) %>%
add_shadow(ambient_shade(dtm_tin_elmat, progbar = FALSE), 0)
plot_3d(map)
map <- dtm_tin_elmat %>%
sphere_shade(texture = "imhof1", progbar = FALSE) %>%
add_water(detect_water(dtm_tin_elmat), color = "imhof1") %>%
add_shadow(ray_shade(dtm_tin_elmat, progbar = FALSE), 0.5)
map <- dtm_tin_elmat %>%
sphere_shade(texture = "imhof1", progbar = FALSE)
plot_3d(map)
map <- dtm_tin_elmat %>%
sphere_shade(texture = "imhof1", progbar = FALSE) %>%
add_water(detect_water(dtm_tin_elmat), color = "imhof1")
plot_3d(map)
plot_3d(map, dtm_tin_elmat, zscale = 1, windowsize = c(800, 800))
map <- dtm_tin_elmat %>%
sphere_shade(texture = "imhof1", progbar = FALSE) %>%
add_water(detect_water(dtm_tin_elmat), color = "imhof1") %>%
add_shadow(ray_shade(dtm_tin_elmat, progbar = FALSE), 0.5) %>%
add_shadow(ambient_shade(dtm_tin_elmat, progbar = FALSE), 0)
plot_3d(map, dtm_tin_elmat, zscale = 1, windowsize = c(800, 800))
library(png)
detach("package:png", unload = TRUE)
